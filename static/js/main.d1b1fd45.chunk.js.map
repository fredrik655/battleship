{"version":3,"sources":["Components/GameBoardDOM.js","Components/ShipFactory.js","Components/GameBoard.js","Components/Player.js","Components/GameLoop.js","Components/PlacementDOM.js","Components/GameDOM.js","Components/GameOverDOM.js","Components/GameLoopDOM.js","App.js","index.js"],"names":["generateSquare","hoverFunc","leaveFunc","onClickPlaceShip","componentArr","i","push","className","data-index","onMouseOver","onMouseLeave","onClick","GameBoardDOM","props","onGameSquareHover","onGameSquareLeave","ship","length","tempArr","initShip","hitArr","initHitArr","sunk","returnShip","returnHit","isSunk","placeShip","placementArr","some","element","Error","hit","boardIndex","includes","index","indexOf","splice","gameBoard","gb","generateEmptyGameBoard","ships","carrier","battleship","cruiser","submarine","destroyer","attacks","misses","checkForShipAtLocation","location","returnGameBoard","returnAttacks","returnMisses","returnShips","name","receiveAttack","attackCoord","checkIfShipHit","allSunk","checkIfPlaced","player","playerNumber","isAI","pNumber","ai","playerGameBoard","returnPlayerNumber","isAi","generateAttack","Math","floor","random","gameLoop","p1","numb","placed","killCount","checkIfOutOfBound","chosenCoords","vertical","toString","split","pop","setUpPlayers","returnPlayers","returnGameBoards","placeShipsRandom","rand","calculateIndices","startIndex","shipSize","allShipsPlaced","gb1","gb2","allPlaced","returnShipPositions","p1Ships","aiShips","p1PosArray","AiPosArray","Object","keys","forEach","attackShip","position","attack","isGameOver","PlacementDOM","id","toggleVertical","changeShip","startGame","generatePlayerSquare","positions","data-ship-id","returnShipId","currentPos","allPos","shipId","generateAiSquare","onClickAttack","GameDOM","setText","GameOverDOM","reload","GameLoopDOM","useState","placeShips","setPlaceShips","GameLoop","gl","setVertical","shipPlacementSize","setShipPlacementSize","currentSelectedShip","setCurrentSelectedShip","shipPositions","setShipPositions","currentColor","setCurrentColor","gameOver","setGameOver","useEffect","ev","target","getAttribute","indices","p1GameBoard","checkIfPlacementContainsShip","tempShipPosition","findGameSquaresWithIndices","style","backgroundColor","setShipBtnDisable","incrementCurrentSelectedShip","console","log","targetIndex","hitStatus","opacity","attackedIndex","attackedDiv","document","querySelector","gmOv","shipName","textContent","btn","shipFound","allSquares","querySelectorAll","selectedSquares","reloadPage","window","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1b1fd45.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GameBoardDOM = (props) => {\n  return (\n    <div className=\"game-board\">\n      {generateSquare(\n        props.onGameSquareHover,\n        props.onGameSquareLeave,\n        props.onClickPlaceShip\n      )}\n    </div>\n  );\n};\n\nconst generateSquare = (hoverFunc, leaveFunc, onClickPlaceShip) => {\n  const componentArr = [];\n  for (let i = 0; i < 100; i++) {\n    componentArr.push(\n      <div\n        key={i}\n        className=\"game-board-square\"\n        data-index={i}\n        onMouseOver={hoverFunc}\n        onMouseLeave={leaveFunc}\n        onClick={onClickPlaceShip}\n      ></div>\n    );\n  }\n  return componentArr;\n};\n\nexport default GameBoardDOM;\n","/*\n  carrier: size 5,\n  battleship: size 4,\n  cruiser: size 3,\n  submarine: size 3,\n  destroyer: size 2\n*/\nconst ship = (length) => {\n  const initShip = () => {\n    const tempArr = [];\n    for (let i = 0; i < length; i++) {\n      tempArr.push(null);\n    }\n    return [...tempArr];\n  };\n\n  const initHitArr = () => {\n    const tempArr = [];\n    for (let i = 0; i < length; i++) {\n      tempArr.push(false);\n    }\n    return [...tempArr];\n  };\n\n  let ship = initShip();\n  const hitArr = initHitArr();\n  let sunk = false;\n\n  const placeShip = (placementArr) => {\n    if (placementArr.some((element) => element < 0)) {\n      throw new Error(\"negative index position\");\n    } else if (placementArr.some((element) => element > 99)) {\n      throw new Error(\"Index out of bound\");\n    } else if (placementArr.length !== ship.length) {\n      throw new Error(\"size mismatch\");\n    } else {\n      ship = [...placementArr];\n    }\n  };\n\n  const setSunk = () => {\n    if (!hitArr.includes(false)) {\n      sunk = true;\n    }\n  };\n\n  const hit = (boardIndex) => {\n    if (ship.includes(boardIndex)) {\n      const index = ship.indexOf(boardIndex);\n      hitArr.splice(index, 1, true);\n      setSunk();\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const returnShip = () => {\n    return ship;\n  };\n\n  const returnHit = () => {\n    return hitArr;\n  };\n\n  const isSunk = () => {\n    return sunk;\n  };\n\n  return { returnShip, returnHit, isSunk, placeShip, hit };\n};\n\nexport default ship;\n","import ship from \"./ShipFactory\";\n\nconst gameBoard = () => {\n  const generateEmptyGameBoard = () => {\n    const tempArr = [];\n    for (let i = 0; i < 100; i++) {\n      tempArr.push(null);\n    }\n    return [...tempArr];\n  };\n\n  const gb = generateEmptyGameBoard();\n  const ships = {\n    carrier: {\n      ship: ship(5),\n    },\n    battleship: {\n      ship: ship(4),\n    },\n    cruiser: {\n      ship: ship(3),\n    },\n    submarine: {\n      ship: ship(3),\n    },\n    destroyer: {\n      ship: ship(2),\n    },\n  };\n\n  const attacks = [];\n  const misses = [];\n\n  const checkIfPlaced = (name) => {\n    if (ships[name].ship.returnShip().includes(null)) {\n      return false;\n    }\n    return true;\n  };\n\n  const placeShip = (name, location) => {\n    if (checkForShipAtLocation(location)) {\n      ships[name].ship.placeShip(location);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkForShipAtLocation = (location) => {\n    for (let i = 0; i < location.length; i++) {\n      if (ships[\"carrier\"].ship.returnShip().includes(location[i])) {\n        return false;\n      } else if (ships[\"battleship\"].ship.returnShip().includes(location[i])) {\n        return false;\n      } else if (ships[\"cruiser\"].ship.returnShip().includes(location[i])) {\n        return false;\n      } else if (ships[\"submarine\"].ship.returnShip().includes(location[i])) {\n        return false;\n      } else if (ships[\"destroyer\"].ship.returnShip().includes(location[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const checkIfShipHit = (attackCoord) => {\n    if (ships[\"carrier\"].ship.hit(attackCoord)) {\n      return true;\n    } else if (ships[\"battleship\"].ship.hit(attackCoord)) {\n      return true;\n    } else if (ships[\"cruiser\"].ship.hit(attackCoord)) {\n      return true;\n    } else if (ships[\"submarine\"].ship.hit(attackCoord)) {\n      return true;\n    } else if (ships[\"destroyer\"].ship.hit(attackCoord)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const receiveAttack = (attackCoord) => {\n    if (!attacks.includes(attackCoord)) {\n      attacks.push(attackCoord);\n      if (checkIfShipHit(attackCoord)) {\n        return \"hit\";\n      } else {\n        misses.push(attackCoord);\n        return \"miss\";\n      }\n    } else {\n      return \"attacked\";\n    }\n  };\n\n  const allSunk = () => {\n    let sunk = true;\n    if (!ships[\"carrier\"].ship.isSunk()) {\n      sunk = false;\n    } else if (!ships[\"battleship\"].ship.isSunk()) {\n      sunk = false;\n    } else if (!ships[\"cruiser\"].ship.isSunk()) {\n      sunk = false;\n    } else if (!ships[\"submarine\"].ship.isSunk()) {\n      sunk = false;\n    } else if (!ships[\"destroyer\"].ship.isSunk()) {\n      sunk = false;\n    }\n\n    return sunk;\n  };\n\n  const returnGameBoard = () => {\n    return gb;\n  };\n\n  const returnAttacks = () => {\n    return attacks;\n  };\n\n  const returnMisses = () => {\n    return misses;\n  };\n\n  const returnShips = () => {\n    return ships;\n  };\n\n  return {\n    returnGameBoard,\n    returnAttacks,\n    returnMisses,\n    returnShips,\n    placeShip,\n    receiveAttack,\n    allSunk,\n    checkIfPlaced,\n  };\n};\n\nexport default gameBoard;\n","import gameBoard from \"./GameBoard\";\n\nconst player = (playerNumber, isAI) => {\n  const pNumber = playerNumber;\n  const ai = isAI;\n  const playerGameBoard = gameBoard();\n\n  const returnPlayerNumber = () => {\n    return pNumber;\n  };\n\n  const isAi = () => {\n    return ai;\n  };\n\n  const returnGameBoard = () => {\n    return playerGameBoard;\n  };\n\n  const generateAttack = () => {\n    if (ai === true) {\n      return Math.floor(Math.random() * 100);\n    } else {\n      return false;\n    }\n  };\n\n  return { returnPlayerNumber, isAi, returnGameBoard, generateAttack };\n};\n\nexport default player;\n","import player from \"./Player\";\n\nconst gameLoop = () => {\n  let p1 = null;\n  let ai = null;\n\n  const setUpPlayers = () => {\n    p1 = player(1, false);\n    ai = player(2, true);\n  };\n\n  const placeShipsRandom = () => {\n    const rand = Math.floor(Math.random() * 4);\n    if (rand < 1) {\n      placeShip(2, \"carrier\", [2, 3, 4, 5, 6]);\n      placeShip(2, \"battleship\", [45, 55, 65, 75]);\n      placeShip(2, \"cruiser\", [38, 48, 58]);\n      placeShip(2, \"submarine\", [13, 14, 15]);\n      placeShip(2, \"destroyer\", [98, 99]);\n    } else if (rand >= 1 && rand <= 2) {\n      placeShip(2, \"carrier\", [32, 42, 52, 62, 72]);\n      placeShip(2, \"battleship\", [84, 85, 86, 87]);\n      placeShip(2, \"cruiser\", [29, 39, 49]);\n      placeShip(2, \"submarine\", [55, 56, 57]);\n      placeShip(2, \"destroyer\", [6, 16]);\n    } else {\n      placeShip(2, \"carrier\", [91, 92, 93, 94, 95]);\n      placeShip(2, \"battleship\", [58, 68, 78, 88]);\n      placeShip(2, \"cruiser\", [74, 75, 76]);\n      placeShip(2, \"submarine\", [50, 51, 52]);\n      placeShip(2, \"destroyer\", [54, 64]);\n    }\n\n    return true;\n  };\n\n  const allShipsPlaced = () => {\n    const gb1 = p1.returnGameBoard();\n    const gb2 = ai.returnGameBoard();\n\n    let allPlaced = !gb1.checkIfPlaced(\"carrier\")\n      ? false\n      : !gb1.checkIfPlaced(\"battleship\")\n      ? false\n      : !gb1.checkIfPlaced(\"cruiser\")\n      ? false\n      : !gb1.checkIfPlaced(\"submarine\")\n      ? false\n      : !gb1.checkIfPlaced(\"destroyer\")\n      ? false\n      : true;\n    if (allPlaced === true) {\n      allPlaced = !gb2.checkIfPlaced(\"carrier\")\n        ? false\n        : !gb2.checkIfPlaced(\"battleship\")\n        ? false\n        : !gb2.checkIfPlaced(\"cruiser\")\n        ? false\n        : !gb2.checkIfPlaced(\"submarine\")\n        ? false\n        : !gb2.checkIfPlaced(\"destroyer\")\n        ? false\n        : true;\n    }\n    return allPlaced;\n  };\n\n  const attackShip = (player, position) => {\n    if (player === 1) {\n      return ai.returnGameBoard().receiveAttack(position);\n    } else {\n      let attack = ai.generateAttack();\n      while (p1.returnGameBoard().receiveAttack(attack) === \"attacked\") {\n        attack = ai.generateAttack();\n      }\n      return attack;\n    }\n  };\n\n  const returnShipPositions = () => {\n    const p1Ships = p1.returnGameBoard().returnShips();\n    const aiShips = ai.returnGameBoard().returnShips();\n\n    const p1PosArray = [];\n    const AiPosArray = [];\n\n    Object.keys(p1Ships).forEach((element) => {\n      p1PosArray.push(p1Ships[element].ship.returnShip());\n    });\n\n    Object.keys(aiShips).forEach((element) => {\n      AiPosArray.push(aiShips[element].ship.returnShip());\n    });\n\n    return [p1PosArray, AiPosArray];\n  };\n\n  const placeShip = (numb, name, location) => {\n    let placed = false;\n    let killCount = 0;\n    while (!placed && killCount < 10) {\n      if (numb === 1) {\n        placed = p1.returnGameBoard().placeShip(name, location);\n      } else {\n        placed = ai.returnGameBoard().placeShip(name, location);\n      }\n      killCount++;\n    }\n    if (placed === false) {\n      throw new Error(\"cant place ship\");\n    }\n  };\n\n  const calculateIndices = (startIndex, vertical, shipSize) => {\n    const tempArr = [startIndex];\n    if (!vertical) {\n      for (let i = 1; i < shipSize; i++) {\n        tempArr.push(startIndex + i);\n      }\n    } else {\n      for (let i = 1; i < shipSize; i++) {\n        tempArr.push(startIndex + 10 * i);\n      }\n    }\n    if (checkIfOutOfBound(tempArr, vertical)) {\n      return false;\n    } else {\n      return tempArr;\n    }\n  };\n\n  const checkIfOutOfBound = (chosenCoords, vertical) => {\n    if (!vertical) {\n      for (let i = 0; i < chosenCoords.length - 1; i++) {\n        const lastDigit = chosenCoords[i].toString().split(\"\").pop();\n        if (+lastDigit === 9) {\n          return true;\n        }\n      }\n    } else {\n      if (chosenCoords[chosenCoords.length - 1] > 99) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const isGameOver = () => {\n    if (ai.returnGameBoard().allSunk()) {\n      return [true, 1];\n    } else if (p1.returnGameBoard().allSunk()) {\n      return [true, 2];\n    }\n\n    return [false, null];\n  };\n\n  const returnPlayers = () => {\n    return [p1, ai];\n  };\n\n  const returnGameBoards = () => {\n    return [p1.returnGameBoard(), ai.returnGameBoard()];\n  };\n\n  return {\n    setUpPlayers,\n    returnPlayers,\n    returnGameBoards,\n    placeShipsRandom,\n    calculateIndices,\n    placeShip,\n    allShipsPlaced,\n    returnShipPositions,\n    attackShip,\n    isGameOver,\n  };\n};\n\nexport default gameLoop;\n","import React from \"react\";\n\nconst PlacementDOM = (props) => {\n  return (\n    <div id=\"interface\">\n      <button className=\"interface-btn\" onClick={props.toggleVertical}>\n        Vertical\n      </button>\n      <button className=\"interface-btn\" id=\"carrier\" onClick={props.changeShip}>\n        Carrier\n      </button>\n      <button\n        className=\"interface-btn\"\n        id=\"battleship\"\n        onClick={props.changeShip}\n      >\n        Battleship\n      </button>\n      <button className=\"interface-btn\" id=\"cruiser\" onClick={props.changeShip}>\n        Cruiser\n      </button>\n      <button\n        className=\"interface-btn\"\n        id=\"submarine\"\n        onClick={props.changeShip}\n      >\n        Submarine\n      </button>\n      <button\n        className=\"interface-btn\"\n        id=\"destroyer\"\n        onClick={props.changeShip}\n      >\n        Destroyer\n      </button>\n      <button\n        className=\"interface-btn\"\n        id=\"start-game-btn\"\n        onClick={props.startGame}\n      >\n        Start Game\n      </button>\n    </div>\n  );\n};\n\nexport default PlacementDOM;\n","import React from \"react\";\n\nconst GameDOM = (props) => {\n  return [\n    <h2>Sink the enemies ships</h2>,\n    <div id=\"game-board-container\">\n      <div className=\"game-board\">\n        {generatePlayerSquare(props.positions[0])}\n      </div>\n      <div className=\"game-board\">\n        {generateAiSquare(props.positions[1], props.onClickAttack)}\n      </div>\n    </div>,\n  ];\n};\n\nconst generatePlayerSquare = (positions) => {\n  const componentArr = [];\n  for (let i = 0; i < 100; i++) {\n    componentArr.push(\n      <div\n        key={`player-game-square-${i}`}\n        className=\"player-game-board-square\"\n        data-index={`p${i}`}\n        data-ship-id={returnShipId(i, positions)}\n      ></div>\n    );\n  }\n  return componentArr;\n};\n\nconst returnShipId = (currentPos, allPos) => {\n  let shipId = -1;\n  allPos.forEach((element, i) => {\n    if (element.includes(currentPos)) {\n      shipId = i;\n    }\n  });\n  return shipId;\n};\n\nconst generateAiSquare = (positions, onClickAttack) => {\n  const componentArr = [];\n  for (let i = 0; i < 100; i++) {\n    componentArr.push(\n      <div\n        key={`ai-game-square-${i}`}\n        className=\"ai-game-board-square\"\n        onClick={onClickAttack}\n        data-index={`a${i}`}\n        data-ship-id={returnShipId(i, positions)}\n      ></div>\n    );\n  }\n  return componentArr;\n};\n\nexport default GameDOM;\n","import React from \"react\";\n\nconst GameOverDOM = (props) => {\n  return (\n    <div id=\"game-over-container\">\n      {setText(props.player[1])}\n      <button onClick={props.reload}>Play Again</button>\n    </div>\n  );\n};\n\nconst setText = (player) => {\n  if (player === 1) {\n    return <h2>You Win!</h2>;\n  } else {\n    return <h2>Computer Win! You loose</h2>;\n  }\n};\n\nexport default GameOverDOM;\n","import React, { useState, useEffect } from \"react\";\nimport GameBoardDOM from \"./GameBoardDOM\";\nimport GameLoop from \"./GameLoop\";\nimport PlacementDOM from \"./PlacementDOM\";\nimport GameDOM from \"./GameDOM\";\nimport GameOverDOM from \"./GameOverDOM\";\n\nconst GameLoopDOM = () => {\n  const [placeShips, setPlaceShips] = useState(true);\n  // eslint-disable-next-line no-unused-vars\n  const [gl, setGl] = useState(GameLoop());\n  const [vertical, setVertical] = useState(false);\n  const [shipPlacementSize, setShipPlacementSize] = useState(5);\n  const [currentSelectedShip, setCurrentSelectedShip] = useState(\"carrier\");\n  const [shipPositions, setShipPositions] = useState([]);\n  const [currentColor, setCurrentColor] = useState(\"#06d6a0\");\n  const [gameOver, setGameOver] = useState([false, null]);\n\n  useEffect(() => {\n    gl.setUpPlayers();\n    gl.placeShipsRandom();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const startGame = () => {\n    if (gl.allShipsPlaced()) {\n      setPlaceShips(false);\n    }\n  };\n\n  const onClickPlaceShip = (ev) => {\n    const startIndex = ev.target.getAttribute(\"data-index\");\n    const indices = gl.calculateIndices(\n      +startIndex,\n      vertical,\n      shipPlacementSize\n    );\n    if (indices !== false) {\n      const p1GameBoard = gl.returnGameBoards()[0];\n      if (\n        !checkIfPlacementContainsShip(indices) &&\n        !p1GameBoard.checkIfPlaced(currentSelectedShip)\n      ) {\n        const tempShipPosition = [...shipPositions];\n        const selectedSquares = findGameSquaresWithIndices(indices);\n        selectedSquares.forEach((element) => {\n          tempShipPosition.push(+element.getAttribute(\"data-index\"));\n          element.style.backgroundColor = currentColor;\n        });\n        setShipPositions(tempShipPosition);\n        gl.placeShip(1, currentSelectedShip, indices);\n        setShipBtnDisable();\n        incrementCurrentSelectedShip();\n        console.log(\"here\");\n      }\n    }\n  };\n\n  const incrementCurrentSelectedShip = () => {\n    if (currentSelectedShip === \"carrier\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"battleship\");\n      setShipPlacementSize(4);\n    } else if (currentSelectedShip === \"battleship\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"cruiser\");\n      setShipPlacementSize(3);\n    } else if (currentSelectedShip === \"cruiser\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"submarine\");\n      setShipPlacementSize(3);\n    } else if (currentSelectedShip === \"submarine\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"destroyer\");\n      setShipPlacementSize(2);\n    }\n  };\n\n  const onClickAttack = (ev) => {\n    const targetIndex = +ev.target.getAttribute(\"data-index\").split(\"a\")[1];\n    const hitStatus = gl.attackShip(1, targetIndex);\n    if (hitStatus === \"hit\") {\n      console.log(ev.target);\n      ev.target.style.backgroundColor = \"#ef476f\";\n    } else if (hitStatus === \"miss\") {\n      ev.target.style.opacity = 0.7;\n    }\n\n    if (hitStatus !== \"attacked\") {\n      const attackedIndex = gl.attackShip(2);\n      const attackedDiv = document.querySelector(\n        `[data-index=\"p${attackedIndex}\"]`\n      );\n      if (attackedDiv.getAttribute(\"data-ship-id\") !== \"-1\") {\n        attackedDiv.style.backgroundColor = \"#ef476f\";\n      } else {\n        attackedDiv.style.opacity = 0.5;\n      }\n    }\n    const gmOv = gl.isGameOver();\n    if (gmOv[0]) {\n      setGameOver(gmOv);\n    }\n  };\n\n  const setShipBtnDisable = () => {\n    const btn = document.querySelector(`#${currentSelectedShip}`);\n    btn.style.opacity = 0.5;\n  };\n\n  const changeShip = (ev) => {\n    const shipName = ev.target.textContent;\n    if (shipName === \"Carrier\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"carrier\");\n      setShipPlacementSize(5);\n    } else if (shipName === \"Battleship\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"battleship\");\n      setShipPlacementSize(4);\n    } else if (shipName === \"Cruiser\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"cruiser\");\n      setShipPlacementSize(3);\n    } else if (shipName === \"Submarine\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"submarine\");\n      setShipPlacementSize(3);\n    } else if (shipName === \"Destroyer\") {\n      setCurrentColor(\"#06d6a0\");\n      setCurrentSelectedShip(\"destroyer\");\n      setShipPlacementSize(2);\n    }\n  };\n\n  const toggleVertical = (ev) => {\n    const btn = ev.target;\n    if (vertical) {\n      btn.textContent = \"Vertical\";\n      setVertical(false);\n    } else {\n      btn.textContent = \"Horizontal\";\n      setVertical(true);\n    }\n  };\n\n  const onGameSquareHover = (ev) => {\n    const startIndex = ev.target.getAttribute(\"data-index\");\n    const indices = gl.calculateIndices(\n      +startIndex,\n      vertical,\n      shipPlacementSize\n    );\n    if (indices !== false) {\n      if (!checkIfPlacementContainsShip(indices)) {\n        const selectedSquares = findGameSquaresWithIndices(indices);\n        selectedSquares.forEach((element) => {\n          if (element.style.backgroundColor !== \"red\") {\n            element.style.backgroundColor = \"darkslategray\";\n          }\n        });\n      }\n    }\n  };\n\n  const checkIfPlacementContainsShip = (indices) => {\n    let shipFound = false;\n    indices.forEach((element) => {\n      if (shipPositions.includes(element)) {\n        shipFound = true;\n      }\n    });\n    return shipFound;\n  };\n\n  const findGameSquaresWithIndices = (indices) => {\n    const allSquares = document.querySelectorAll(\".game-board-square\");\n    const selectedSquares = [];\n    indices.forEach((element) => {\n      selectedSquares.push(allSquares[element]);\n    });\n    return selectedSquares;\n  };\n\n  const onGameSquareLeave = (ev) => {\n    const allSquares = [...document.querySelectorAll(\".game-board-square\")];\n    allSquares.forEach((element) => {\n      if (element.style.backgroundColor === \"darkslategray\") {\n        element.style.backgroundColor = \"#118ab2\";\n      }\n    });\n  };\n\n  const reloadPage = () => {\n    window.location.reload();\n  };\n\n  const checkIfGameHasStarted = () => {\n    if (gameOver[0]) {\n      return <GameOverDOM player={gameOver} reload={reloadPage} />;\n    } else {\n      if (placeShips) {\n        return [\n          <PlacementDOM\n            key=\"pl-dom\"\n            toggleVertical={toggleVertical}\n            changeShip={changeShip}\n            startGame={startGame}\n          />,\n          <GameBoardDOM\n            key=\"gb-dom\"\n            onGameSquareHover={onGameSquareHover}\n            onGameSquareLeave={onGameSquareLeave}\n            onClickPlaceShip={onClickPlaceShip}\n          />,\n        ];\n      } else {\n        return (\n          <GameDOM\n            positions={gl.returnShipPositions()}\n            onClickAttack={onClickAttack}\n          />\n        );\n      }\n    }\n  };\n\n  return <div id=\"game-container\">{checkIfGameHasStarted()}</div>;\n};\n\nexport default GameLoopDOM;\n","import \"./App.css\";\nimport GameLoopDOM from \"./Components/GameLoopDOM\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameLoopDOM />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}